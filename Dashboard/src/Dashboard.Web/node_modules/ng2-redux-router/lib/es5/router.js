"use strict";
require('rxjs/add/operator/filter');
require('rxjs/add/operator/map');
var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var router_1 = require('@angular/router');
var ng2_redux_1 = require('ng2-redux');
var actions_1 = require('./actions');
var NgReduxRouter = (function () {
    function NgReduxRouter(router, ngRedux, applicationRef, location) {
        this.router = router;
        this.ngRedux = ngRedux;
        this.applicationRef = applicationRef;
        this.location = location;
        this.initialized = false;
        this.selectLocationFromState = function (state) { return state.router; };
    }
    /**
     * Destroys the bindings between ng2-redux and @angular/router.
     * This method unsubscribes from both ng2-redux and @angular router, in case
     * your app needs to tear down the bindings without destroying Angular or Redux
     * at the same time.
     */
    NgReduxRouter.prototype.destroy = function () {
        if (this.urlStateSubscription) {
            this.urlStateSubscription.unsubscribe();
        }
        if (this.reduxSubscription) {
            this.reduxSubscription.unsubscribe();
        }
        this.initialized = false;
    };
    /**
     * Initialize the bindings between ng2-redux and @angular/router
     *
     * This should only be called once for the lifetime of your app, for
     * example in the constructor of your root component.
     *
     *
     * @param {(state: any) => string} selectLocationFromState Optional: If your
     * router state is in a custom location, supply this argument to tell the
     * bindings where to find the router location in the state.
     * @param {Observable<string>} urlState$ Optional: If you have a custom setup
     * when listening to router changes, or use a different router than @angular/router
     * you can supply this argument as an Observable of the current url state.
     */
    NgReduxRouter.prototype.initialize = function (selectLocationFromState, urlState$) {
        if (selectLocationFromState === void 0) { selectLocationFromState = function (state) { return state.router; }; }
        if (urlState$ === void 0) { urlState$ = undefined; }
        if (this.initialized) {
            throw new Error('ng2-redux-router already initialized! If you meant to re-initialize, call destroy first.');
        }
        this.selectLocationFromState = selectLocationFromState;
        this.urlState = urlState$ || this.getDefaultUrlStateObservable();
        this.listenToRouterChanges();
        this.listenToReduxChanges();
        this.initialized = true;
    };
    NgReduxRouter.prototype.getDefaultUrlStateObservable = function () {
        var _this = this;
        return this.router.events
            .filter(function (event) { return event instanceof router_1.NavigationEnd; })
            .map(function (event) { return _this.location.path(); })
            .distinctUntilChanged();
    };
    NgReduxRouter.prototype.getLocationFromStore = function (useInitial) {
        if (useInitial === void 0) { useInitial = false; }
        return this.selectLocationFromState(this.ngRedux.getState()) ||
            (useInitial ? this.initialLocation : '');
    };
    NgReduxRouter.prototype.listenToRouterChanges = function () {
        var _this = this;
        var handleLocationChange = function (location) {
            if (_this.currentLocation === location) {
                // Dont dispatch changes if we haven't changed location.
                return;
            }
            _this.currentLocation = location;
            if (_this.initialLocation === undefined) {
                _this.initialLocation = location;
                // Fetch initial location from store and make sure
                // we dont dispath an event if the current url equals
                // the initial url.
                var locationFromStore = _this.getLocationFromStore();
                if (locationFromStore === _this.currentLocation) {
                    return;
                }
            }
            _this.ngRedux.dispatch({
                type: actions_1.UPDATE_LOCATION,
                payload: location
            });
        };
        this.urlStateSubscription = this.urlState.subscribe(handleLocationChange);
    };
    NgReduxRouter.prototype.listenToReduxChanges = function () {
        var _this = this;
        var handleLocationChange = function (location) {
            if (_this.initialLocation === undefined) {
                // Wait for router to set initial location.
                return;
            }
            var locationInStore = _this.getLocationFromStore(true);
            if (_this.currentLocation === locationInStore) {
                // Dont change router location if its equal to the one in the store.
                return;
            }
            _this.currentLocation = location;
            _this.router.navigateByUrl(location);
        };
        this.reduxSubscription = this.ngRedux
            .select(function (state) { return _this.selectLocationFromState(state); })
            .distinctUntilChanged()
            .subscribe(handleLocationChange);
    };
    NgReduxRouter.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    NgReduxRouter.ctorParameters = [
        { type: router_1.Router, },
        { type: ng2_redux_1.NgRedux, },
        { type: core_1.ApplicationRef, },
        { type: common_1.Location, },
    ];
    return NgReduxRouter;
}());
exports.NgReduxRouter = NgReduxRouter;
//# sourceMappingURL=router.js.map